// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/serverscom/serverscom-go-client/pkg/ssh_keys.go
//
// Generated by this command:
//
//	mockgen --destination ./internal/mocks/ssh_service.go --package=mocks --source ./vendor/github.com/serverscom/serverscom-go-client/pkg/ssh_keys.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockSSHKeysService is a mock of SSHKeysService interface.
type MockSSHKeysService struct {
	ctrl     *gomock.Controller
	recorder *MockSSHKeysServiceMockRecorder
	isgomock struct{}
}

// MockSSHKeysServiceMockRecorder is the mock recorder for MockSSHKeysService.
type MockSSHKeysServiceMockRecorder struct {
	mock *MockSSHKeysService
}

// NewMockSSHKeysService creates a new mock instance.
func NewMockSSHKeysService(ctrl *gomock.Controller) *MockSSHKeysService {
	mock := &MockSSHKeysService{ctrl: ctrl}
	mock.recorder = &MockSSHKeysServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHKeysService) EXPECT() *MockSSHKeysServiceMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockSSHKeysService) Collection() serverscom.Collection[serverscom.SSHKey] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection")
	ret0, _ := ret[0].(serverscom.Collection[serverscom.SSHKey])
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockSSHKeysServiceMockRecorder) Collection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockSSHKeysService)(nil).Collection))
}

// Create mocks base method.
func (m *MockSSHKeysService) Create(ctx context.Context, input serverscom.SSHKeyCreateInput) (*serverscom.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*serverscom.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSSHKeysServiceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSSHKeysService)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockSSHKeysService) Delete(ctx context.Context, fingerprint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, fingerprint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSSHKeysServiceMockRecorder) Delete(ctx, fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSSHKeysService)(nil).Delete), ctx, fingerprint)
}

// Get mocks base method.
func (m *MockSSHKeysService) Get(ctx context.Context, fingerprint string) (*serverscom.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, fingerprint)
	ret0, _ := ret[0].(*serverscom.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSSHKeysServiceMockRecorder) Get(ctx, fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSSHKeysService)(nil).Get), ctx, fingerprint)
}

// Update mocks base method.
func (m *MockSSHKeysService) Update(ctx context.Context, fingerprint string, input serverscom.SSHKeyUpdateInput) (*serverscom.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, fingerprint, input)
	ret0, _ := ret[0].(*serverscom.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSSHKeysServiceMockRecorder) Update(ctx, fingerprint, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSSHKeysService)(nil).Update), ctx, fingerprint, input)
}
