// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/serverscom/serverscom-go-client/pkg/load_balancer_clusters.go
//
// Generated by this command:
//
//	mockgen --destination ./internal/mocks/load_balancers_service.go --package=mocks --source ./vendor/github.com/serverscom/serverscom-go-client/pkg/load_balancer_clusters.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockLoadBalancerClustersService is a mock of LoadBalancerClustersService interface.
type MockLoadBalancerClustersService struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerClustersServiceMockRecorder
}

// MockLoadBalancerClustersServiceMockRecorder is the mock recorder for MockLoadBalancerClustersService.
type MockLoadBalancerClustersServiceMockRecorder struct {
	mock *MockLoadBalancerClustersService
}

// NewMockLoadBalancerClustersService creates a new mock instance.
func NewMockLoadBalancerClustersService(ctrl *gomock.Controller) *MockLoadBalancerClustersService {
	mock := &MockLoadBalancerClustersService{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerClustersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerClustersService) EXPECT() *MockLoadBalancerClustersServiceMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockLoadBalancerClustersService) Collection() serverscom.Collection[serverscom.LoadBalancerCluster] {
m.ctrl.T.Helper()
ret := m.ctrl.Call(m, "Collection")
ret0, _ := ret[0].(serverscom.Collection[serverscom.LoadBalancerCluster])
return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockLoadBalancerClustersServiceMockRecorder) Collection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockLoadBalancerClustersService)(nil).Collection))
}

// GetLoadBalancerCluster mocks base method.
func (m *MockLoadBalancerClustersService) GetLoadBalancerCluster(arg0 context.Context, arg1 string) (*serverscom.LoadBalancerCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerCluster", arg0, arg1)
	ret0, _ := ret[0].(*serverscom.LoadBalancerCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerCluster indicates an expected call of GetLoadBalancerCluster.
func (mr *MockLoadBalancerClustersServiceMockRecorder) GetLoadBalancerCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerCluster", reflect.TypeOf((*MockLoadBalancerClustersService)(nil).GetLoadBalancerCluster), arg0, arg1)
}
