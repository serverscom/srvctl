// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/serverscom/serverscom-go-client/pkg/locations.go
//
// Generated by this command:
//
//	mockgen --destination ./internal/mocks/locations_service.go --package=mocks --source ./vendor/github.com/serverscom/serverscom-go-client/pkg/locations.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockLocationsService is a mock of LocationsService interface.
type MockLocationsService struct {
	ctrl     *gomock.Controller
	recorder *MockLocationsServiceMockRecorder
	isgomock struct{}
}

// MockLocationsServiceMockRecorder is the mock recorder for MockLocationsService.
type MockLocationsServiceMockRecorder struct {
	mock *MockLocationsService
}

// NewMockLocationsService creates a new mock instance.
func NewMockLocationsService(ctrl *gomock.Controller) *MockLocationsService {
	mock := &MockLocationsService{ctrl: ctrl}
	mock.recorder = &MockLocationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationsService) EXPECT() *MockLocationsServiceMockRecorder {
	return m.recorder
}

// BandwidthOptions mocks base method.
func (m *MockLocationsService) BandwidthOptions(locationID, serverModelID, uplinkID int64) serverscom.Collection[serverscom.BandwidthOption] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BandwidthOptions", locationID, serverModelID, uplinkID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.BandwidthOption])
	return ret0
}

// BandwidthOptions indicates an expected call of BandwidthOptions.
func (mr *MockLocationsServiceMockRecorder) BandwidthOptions(locationID, serverModelID, uplinkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BandwidthOptions", reflect.TypeOf((*MockLocationsService)(nil).BandwidthOptions), locationID, serverModelID, uplinkID)
}

// Collection mocks base method.
func (m *MockLocationsService) Collection() serverscom.Collection[serverscom.Location] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection")
	ret0, _ := ret[0].(serverscom.Collection[serverscom.Location])
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockLocationsServiceMockRecorder) Collection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockLocationsService)(nil).Collection))
}

// DriveModelOptions mocks base method.
func (m *MockLocationsService) DriveModelOptions(locationID, serverModelID int64) serverscom.Collection[serverscom.DriveModel] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveModelOptions", locationID, serverModelID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.DriveModel])
	return ret0
}

// DriveModelOptions indicates an expected call of DriveModelOptions.
func (mr *MockLocationsServiceMockRecorder) DriveModelOptions(locationID, serverModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveModelOptions", reflect.TypeOf((*MockLocationsService)(nil).DriveModelOptions), locationID, serverModelID)
}

// GetBandwidthOption mocks base method.
func (m *MockLocationsService) GetBandwidthOption(ctx context.Context, locationID, serverModelID, uplinkModelID, bandwidthID int64) (*serverscom.BandwidthOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidthOption", ctx, locationID, serverModelID, uplinkModelID, bandwidthID)
	ret0, _ := ret[0].(*serverscom.BandwidthOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBandwidthOption indicates an expected call of GetBandwidthOption.
func (mr *MockLocationsServiceMockRecorder) GetBandwidthOption(ctx, locationID, serverModelID, uplinkModelID, bandwidthID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidthOption", reflect.TypeOf((*MockLocationsService)(nil).GetBandwidthOption), ctx, locationID, serverModelID, uplinkModelID, bandwidthID)
}

// GetDriveModelOption mocks base method.
func (m *MockLocationsService) GetDriveModelOption(ctx context.Context, locationID, serverModelID, driveModelID int64) (*serverscom.DriveModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriveModelOption", ctx, locationID, serverModelID, driveModelID)
	ret0, _ := ret[0].(*serverscom.DriveModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriveModelOption indicates an expected call of GetDriveModelOption.
func (mr *MockLocationsServiceMockRecorder) GetDriveModelOption(ctx, locationID, serverModelID, driveModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriveModelOption", reflect.TypeOf((*MockLocationsService)(nil).GetDriveModelOption), ctx, locationID, serverModelID, driveModelID)
}

// GetLocation mocks base method.
func (m *MockLocationsService) GetLocation(ctx context.Context, locationID int64) (*serverscom.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", ctx, locationID)
	ret0, _ := ret[0].(*serverscom.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockLocationsServiceMockRecorder) GetLocation(ctx, locationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockLocationsService)(nil).GetLocation), ctx, locationID)
}

// GetOperatingSystemOption mocks base method.
func (m *MockLocationsService) GetOperatingSystemOption(ctx context.Context, locationID, serverModelID, operatingSystemID int64) (*serverscom.OperatingSystemOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatingSystemOption", ctx, locationID, serverModelID, operatingSystemID)
	ret0, _ := ret[0].(*serverscom.OperatingSystemOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatingSystemOption indicates an expected call of GetOperatingSystemOption.
func (mr *MockLocationsServiceMockRecorder) GetOperatingSystemOption(ctx, locationID, serverModelID, operatingSystemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatingSystemOption", reflect.TypeOf((*MockLocationsService)(nil).GetOperatingSystemOption), ctx, locationID, serverModelID, operatingSystemID)
}

// GetSBMFlavorOption mocks base method.
func (m *MockLocationsService) GetSBMFlavorOption(ctx context.Context, locationID, sbmFlavorModelID int64) (*serverscom.SBMFlavor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSBMFlavorOption", ctx, locationID, sbmFlavorModelID)
	ret0, _ := ret[0].(*serverscom.SBMFlavor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSBMFlavorOption indicates an expected call of GetSBMFlavorOption.
func (mr *MockLocationsServiceMockRecorder) GetSBMFlavorOption(ctx, locationID, sbmFlavorModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSBMFlavorOption", reflect.TypeOf((*MockLocationsService)(nil).GetSBMFlavorOption), ctx, locationID, sbmFlavorModelID)
}

// GetSBMOperatingSystemOption mocks base method.
func (m *MockLocationsService) GetSBMOperatingSystemOption(ctx context.Context, locationID, sbmFlavorModelID, operatingSystemID int64) (*serverscom.OperatingSystemOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSBMOperatingSystemOption", ctx, locationID, sbmFlavorModelID, operatingSystemID)
	ret0, _ := ret[0].(*serverscom.OperatingSystemOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSBMOperatingSystemOption indicates an expected call of GetSBMOperatingSystemOption.
func (mr *MockLocationsServiceMockRecorder) GetSBMOperatingSystemOption(ctx, locationID, sbmFlavorModelID, operatingSystemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSBMOperatingSystemOption", reflect.TypeOf((*MockLocationsService)(nil).GetSBMOperatingSystemOption), ctx, locationID, sbmFlavorModelID, operatingSystemID)
}

// GetServerModelOption mocks base method.
func (m *MockLocationsService) GetServerModelOption(ctx context.Context, locationID, serverModelID int64) (*serverscom.ServerModelOptionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerModelOption", ctx, locationID, serverModelID)
	ret0, _ := ret[0].(*serverscom.ServerModelOptionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerModelOption indicates an expected call of GetServerModelOption.
func (mr *MockLocationsServiceMockRecorder) GetServerModelOption(ctx, locationID, serverModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerModelOption", reflect.TypeOf((*MockLocationsService)(nil).GetServerModelOption), ctx, locationID, serverModelID)
}

// GetUplinkOption mocks base method.
func (m *MockLocationsService) GetUplinkOption(ctx context.Context, locationID, serverModelID, uplinkModelID int64) (*serverscom.UplinkOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUplinkOption", ctx, locationID, serverModelID, uplinkModelID)
	ret0, _ := ret[0].(*serverscom.UplinkOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUplinkOption indicates an expected call of GetUplinkOption.
func (mr *MockLocationsServiceMockRecorder) GetUplinkOption(ctx, locationID, serverModelID, uplinkModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUplinkOption", reflect.TypeOf((*MockLocationsService)(nil).GetUplinkOption), ctx, locationID, serverModelID, uplinkModelID)
}

// OperatingSystemOptions mocks base method.
func (m *MockLocationsService) OperatingSystemOptions(locationID, serverModelID int64) serverscom.Collection[serverscom.OperatingSystemOption] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatingSystemOptions", locationID, serverModelID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.OperatingSystemOption])
	return ret0
}

// OperatingSystemOptions indicates an expected call of OperatingSystemOptions.
func (mr *MockLocationsServiceMockRecorder) OperatingSystemOptions(locationID, serverModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystemOptions", reflect.TypeOf((*MockLocationsService)(nil).OperatingSystemOptions), locationID, serverModelID)
}

// RAMOptions mocks base method.
func (m *MockLocationsService) RAMOptions(locationID, serverModelID int64) serverscom.Collection[serverscom.RAMOption] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RAMOptions", locationID, serverModelID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.RAMOption])
	return ret0
}

// RAMOptions indicates an expected call of RAMOptions.
func (mr *MockLocationsServiceMockRecorder) RAMOptions(locationID, serverModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RAMOptions", reflect.TypeOf((*MockLocationsService)(nil).RAMOptions), locationID, serverModelID)
}

// SBMFlavorOptions mocks base method.
func (m *MockLocationsService) SBMFlavorOptions(locationID int64) serverscom.Collection[serverscom.SBMFlavor] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SBMFlavorOptions", locationID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.SBMFlavor])
	return ret0
}

// SBMFlavorOptions indicates an expected call of SBMFlavorOptions.
func (mr *MockLocationsServiceMockRecorder) SBMFlavorOptions(locationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SBMFlavorOptions", reflect.TypeOf((*MockLocationsService)(nil).SBMFlavorOptions), locationID)
}

// SBMOperatingSystemOptions mocks base method.
func (m *MockLocationsService) SBMOperatingSystemOptions(locationID, sbmFlavorModelID int64) serverscom.Collection[serverscom.OperatingSystemOption] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SBMOperatingSystemOptions", locationID, sbmFlavorModelID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.OperatingSystemOption])
	return ret0
}

// SBMOperatingSystemOptions indicates an expected call of SBMOperatingSystemOptions.
func (mr *MockLocationsServiceMockRecorder) SBMOperatingSystemOptions(locationID, sbmFlavorModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SBMOperatingSystemOptions", reflect.TypeOf((*MockLocationsService)(nil).SBMOperatingSystemOptions), locationID, sbmFlavorModelID)
}

// ServerModelOptions mocks base method.
func (m *MockLocationsService) ServerModelOptions(locationID int64) serverscom.Collection[serverscom.ServerModelOption] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerModelOptions", locationID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.ServerModelOption])
	return ret0
}

// ServerModelOptions indicates an expected call of ServerModelOptions.
func (mr *MockLocationsServiceMockRecorder) ServerModelOptions(locationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerModelOptions", reflect.TypeOf((*MockLocationsService)(nil).ServerModelOptions), locationID)
}

// UplinkOptions mocks base method.
func (m *MockLocationsService) UplinkOptions(locationID, serverModelID int64) serverscom.Collection[serverscom.UplinkOption] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UplinkOptions", locationID, serverModelID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.UplinkOption])
	return ret0
}

// UplinkOptions indicates an expected call of UplinkOptions.
func (mr *MockLocationsServiceMockRecorder) UplinkOptions(locationID, serverModelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UplinkOptions", reflect.TypeOf((*MockLocationsService)(nil).UplinkOptions), locationID, serverModelID)
}
