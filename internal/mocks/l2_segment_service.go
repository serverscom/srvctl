// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/serverscom/serverscom-go-client/pkg/l2_segments.go
//
// Generated by this command:
//
//	mockgen --destination ./internal/mocks/l2_segment_service.go --package=mocks --source ./vendor/github.com/serverscom/serverscom-go-client/pkg/l2_segments.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockL2SegmentsService is a mock of L2SegmentsService interface.
type MockL2SegmentsService struct {
	ctrl     *gomock.Controller
	recorder *MockL2SegmentsServiceMockRecorder
	isgomock struct{}
}

// MockL2SegmentsServiceMockRecorder is the mock recorder for MockL2SegmentsService.
type MockL2SegmentsServiceMockRecorder struct {
	mock *MockL2SegmentsService
}

// NewMockL2SegmentsService creates a new mock instance.
func NewMockL2SegmentsService(ctrl *gomock.Controller) *MockL2SegmentsService {
	mock := &MockL2SegmentsService{ctrl: ctrl}
	mock.recorder = &MockL2SegmentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockL2SegmentsService) EXPECT() *MockL2SegmentsServiceMockRecorder {
	return m.recorder
}

// ChangeNetworks mocks base method.
func (m *MockL2SegmentsService) ChangeNetworks(ctx context.Context, segmentID string, input serverscom.L2SegmentChangeNetworksInput) (*serverscom.L2Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeNetworks", ctx, segmentID, input)
	ret0, _ := ret[0].(*serverscom.L2Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeNetworks indicates an expected call of ChangeNetworks.
func (mr *MockL2SegmentsServiceMockRecorder) ChangeNetworks(ctx, segmentID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeNetworks", reflect.TypeOf((*MockL2SegmentsService)(nil).ChangeNetworks), ctx, segmentID, input)
}

// Collection mocks base method.
func (m *MockL2SegmentsService) Collection() serverscom.Collection[serverscom.L2Segment] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection")
	ret0, _ := ret[0].(serverscom.Collection[serverscom.L2Segment])
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockL2SegmentsServiceMockRecorder) Collection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockL2SegmentsService)(nil).Collection))
}

// Create mocks base method.
func (m *MockL2SegmentsService) Create(ctx context.Context, input serverscom.L2SegmentCreateInput) (*serverscom.L2Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*serverscom.L2Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockL2SegmentsServiceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockL2SegmentsService)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockL2SegmentsService) Delete(ctx context.Context, segmentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, segmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockL2SegmentsServiceMockRecorder) Delete(ctx, segmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockL2SegmentsService)(nil).Delete), ctx, segmentID)
}

// Get mocks base method.
func (m *MockL2SegmentsService) Get(ctx context.Context, segmentID string) (*serverscom.L2Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, segmentID)
	ret0, _ := ret[0].(*serverscom.L2Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockL2SegmentsServiceMockRecorder) Get(ctx, segmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockL2SegmentsService)(nil).Get), ctx, segmentID)
}

// LocationGroups mocks base method.
func (m *MockL2SegmentsService) LocationGroups() serverscom.Collection[serverscom.L2LocationGroup] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationGroups")
	ret0, _ := ret[0].(serverscom.Collection[serverscom.L2LocationGroup])
	return ret0
}

// LocationGroups indicates an expected call of LocationGroups.
func (mr *MockL2SegmentsServiceMockRecorder) LocationGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationGroups", reflect.TypeOf((*MockL2SegmentsService)(nil).LocationGroups))
}

// Members mocks base method.
func (m *MockL2SegmentsService) Members(segmentID string) serverscom.Collection[serverscom.L2Member] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", segmentID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.L2Member])
	return ret0
}

// Members indicates an expected call of Members.
func (mr *MockL2SegmentsServiceMockRecorder) Members(segmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockL2SegmentsService)(nil).Members), segmentID)
}

// Networks mocks base method.
func (m *MockL2SegmentsService) Networks(segmentID string) serverscom.Collection[serverscom.Network] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Networks", segmentID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.Network])
	return ret0
}

// Networks indicates an expected call of Networks.
func (mr *MockL2SegmentsServiceMockRecorder) Networks(segmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networks", reflect.TypeOf((*MockL2SegmentsService)(nil).Networks), segmentID)
}

// Update mocks base method.
func (m *MockL2SegmentsService) Update(ctx context.Context, segmentID string, input serverscom.L2SegmentUpdateInput) (*serverscom.L2Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, segmentID, input)
	ret0, _ := ret[0].(*serverscom.L2Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockL2SegmentsServiceMockRecorder) Update(ctx, segmentID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockL2SegmentsService)(nil).Update), ctx, segmentID, input)
}
