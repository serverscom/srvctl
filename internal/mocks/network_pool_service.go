// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/serverscom/serverscom-go-client/pkg/network_pools.go
//
// Generated by this command:
//
//	mockgen --destination ./internal/mocks/network_pool_service.go --package=mocks --source ./vendor/github.com/serverscom/serverscom-go-client/pkg/network_pools.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockNetworkPoolsService is a mock of NetworkPoolsService interface.
type MockNetworkPoolsService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPoolsServiceMockRecorder
	isgomock struct{}
}

// MockNetworkPoolsServiceMockRecorder is the mock recorder for MockNetworkPoolsService.
type MockNetworkPoolsServiceMockRecorder struct {
	mock *MockNetworkPoolsService
}

// NewMockNetworkPoolsService creates a new mock instance.
func NewMockNetworkPoolsService(ctrl *gomock.Controller) *MockNetworkPoolsService {
	mock := &MockNetworkPoolsService{ctrl: ctrl}
	mock.recorder = &MockNetworkPoolsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkPoolsService) EXPECT() *MockNetworkPoolsServiceMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockNetworkPoolsService) Collection() serverscom.Collection[serverscom.NetworkPool] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection")
	ret0, _ := ret[0].(serverscom.Collection[serverscom.NetworkPool])
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockNetworkPoolsServiceMockRecorder) Collection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockNetworkPoolsService)(nil).Collection))
}

// CreateSubnetwork mocks base method.
func (m *MockNetworkPoolsService) CreateSubnetwork(ctx context.Context, networkPoolID string, input serverscom.SubnetworkCreateInput) (*serverscom.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetwork", ctx, networkPoolID, input)
	ret0, _ := ret[0].(*serverscom.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnetwork indicates an expected call of CreateSubnetwork.
func (mr *MockNetworkPoolsServiceMockRecorder) CreateSubnetwork(ctx, networkPoolID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetwork", reflect.TypeOf((*MockNetworkPoolsService)(nil).CreateSubnetwork), ctx, networkPoolID, input)
}

// DeleteSubnetwork mocks base method.
func (m *MockNetworkPoolsService) DeleteSubnetwork(ctx context.Context, networkPoolID, subnetworkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetwork", ctx, networkPoolID, subnetworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnetwork indicates an expected call of DeleteSubnetwork.
func (mr *MockNetworkPoolsServiceMockRecorder) DeleteSubnetwork(ctx, networkPoolID, subnetworkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetwork", reflect.TypeOf((*MockNetworkPoolsService)(nil).DeleteSubnetwork), ctx, networkPoolID, subnetworkID)
}

// Get mocks base method.
func (m *MockNetworkPoolsService) Get(ctx context.Context, id string) (*serverscom.NetworkPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*serverscom.NetworkPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNetworkPoolsServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkPoolsService)(nil).Get), ctx, id)
}

// GetSubnetwork mocks base method.
func (m *MockNetworkPoolsService) GetSubnetwork(ctx context.Context, networkPoolID, subnetworkID string) (*serverscom.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetwork", ctx, networkPoolID, subnetworkID)
	ret0, _ := ret[0].(*serverscom.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetwork indicates an expected call of GetSubnetwork.
func (mr *MockNetworkPoolsServiceMockRecorder) GetSubnetwork(ctx, networkPoolID, subnetworkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetwork", reflect.TypeOf((*MockNetworkPoolsService)(nil).GetSubnetwork), ctx, networkPoolID, subnetworkID)
}

// Subnetworks mocks base method.
func (m *MockNetworkPoolsService) Subnetworks(networkPoolID string) serverscom.Collection[serverscom.Subnetwork] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnetworks", networkPoolID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.Subnetwork])
	return ret0
}

// Subnetworks indicates an expected call of Subnetworks.
func (mr *MockNetworkPoolsServiceMockRecorder) Subnetworks(networkPoolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnetworks", reflect.TypeOf((*MockNetworkPoolsService)(nil).Subnetworks), networkPoolID)
}

// Update mocks base method.
func (m *MockNetworkPoolsService) Update(ctx context.Context, id string, input serverscom.NetworkPoolInput) (*serverscom.NetworkPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, input)
	ret0, _ := ret[0].(*serverscom.NetworkPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNetworkPoolsServiceMockRecorder) Update(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkPoolsService)(nil).Update), ctx, id, input)
}

// UpdateSubnetwork mocks base method.
func (m *MockNetworkPoolsService) UpdateSubnetwork(ctx context.Context, networkPoolID, subnetworkID string, input serverscom.SubnetworkUpdateInput) (*serverscom.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnetwork", ctx, networkPoolID, subnetworkID, input)
	ret0, _ := ret[0].(*serverscom.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnetwork indicates an expected call of UpdateSubnetwork.
func (mr *MockNetworkPoolsServiceMockRecorder) UpdateSubnetwork(ctx, networkPoolID, subnetworkID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetwork", reflect.TypeOf((*MockNetworkPoolsService)(nil).UpdateSubnetwork), ctx, networkPoolID, subnetworkID, input)
}
